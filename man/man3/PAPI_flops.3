.TH "PAPI_flops" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_flops \- 
.PP
Simplified call to get Mflops/s (floating point operation rate), real and processor time\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
\fBC Interface: \fP
.RS 4
#include <\fBpapi\&.h\fP> 
.br
int \fBPAPI_flops( float *rtime, float *ptime, long long *flpops, float *mflops )\fP;
.RE
.PP
\fBParameters:\fP
.RS 4
\fI*rtime\fP total realtime since the first call 
.br
\fI*ptime\fP total process time since the first call 
.br
\fI*flpops\fP total floating point operations since the first call 
.br
\fI*mflops\fP incremental (Mega) floating point operations per seconds since the last call
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIPAPI_EINVAL\fP The counters were already started by something other than \fBPAPI_flops()\fP\&. 
.br
\fIPAPI_ENOEVNT\fP The floating point operations event does not exist\&. 
.br
\fIPAPI_ENOMEM\fP Insufficient memory to complete the operation\&.
.RE
.PP
The first call to \fBPAPI_flops()\fP will initialize the PAPI High Level interface, set up the counters to monitor the PAPI_FP_OPS event and start the counters\&.
.PP
Subsequent calls will read the counters and return total real time, total process time, total floating point operations since the start of the measurement and the Mflop/s rate since latest call to \fBPAPI_flops()\fP\&. A call to \fBPAPI_stop_counters()\fP will stop the counters from running and then calls such as \fBPAPI_start_counters()\fP or other rate calls can safely be used\&.
.PP
\fBPAPI_flops\fP returns information related to theoretical floating point operations rather than simple instructions\&. It uses the PAPI_FP_OPS event which attempts to 'correctly' account for, e\&.g\&., FMA undercounts and FP Store overcounts, etc\&.
.PP
\fBSee Also:\fP
.RS 4
\fBPAPI_flips()\fP 
.PP
\fBPAPI_ipc()\fP 
.PP
\fBPAPI_epc()\fP 
.PP
\fBPAPI_stop_counters()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
