.TH "PAPI_get_thr_specific" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_get_thr_specific \- 
.PP
Retrieve a pointer to a thread specific data structure\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@par Prototype:
    \#include <papi.h> @n
    int PAPI_get_thr_specific( int tag, void **ptr );

@param tag
    An identifier, the value of which is either PAPI_USR1_TLS or 
    PAPI_USR2_TLS. This identifier indicates which of several data 
    structures associated with this thread is to be accessed.
@param ptr
    A pointer to the memory containing the data structure. 

@retval PAPI_OK
@retval PAPI_EINVAL 
    The @em tag argument is out of range. 

In C, PAPI_get_thr_specific PAPI_get_thr_specific will retrieve the pointer from the array with index @em tag. 
There are 2 user available locations and @em tag can be either 
PAPI_USR1_TLS or PAPI_USR2_TLS. 
The array mentioned above is managed by PAPI and allocated to each 
thread which has called PAPI_thread_init. 
There is no Fortran equivalent function. 

@par Example:

.fi
.PP
 
.PP
.nf
 int ret;
 HighLevelInfo *state = NULL;
 ret = PAPI_thread_init(pthread_self);
 if (ret != PAPI_OK) handle_error(ret);
 
 // Do we have the thread specific data setup yet?

ret = PAPI_get_thr_specific(PAPI_USR1_TLS, (void *) &state);
if (ret != PAPI_OK || state == NULL) {
    state = (HighLevelInfo *) malloc(sizeof(HighLevelInfo));
    if (state == NULL) return (PAPI_ESYS);
    memset(state, 0, sizeof(HighLevelInfo));
    state->EventSet = PAPI_NULL;
    ret = PAPI_create_eventset(&state->EventSet);
    if (ret != PAPI_OK) return (PAPI_ESYS);
    ret = PAPI_set_thr_specific(PAPI_USR1_TLS, state);
    if (ret != PAPI_OK) return (ret);
}
*   

.fi
.PP
 
.PP
\fBSee Also:\fP
.RS 4
\fBPAPI_register_thread\fP \fBPAPI_thread_init\fP \fBPAPI_thread_id\fP \fBPAPI_set_thr_specific\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
