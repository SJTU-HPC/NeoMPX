.TH "PAPI_set_domain" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_set_domain \- 
.PP
Set the default counting domain for new event sets bound to the cpu component\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@par C Prototype:
    \#include <papi.h> @n
    int PAPI_set_domain( int domain );

@param domain one of the following constants as defined in the papi.h header file
@arg PAPI_DOM_USER User context counted
@arg PAPI_DOM_KERNEL  Kernel/OS context counted
@arg PAPI_DOM_OTHER Exception/transient mode counted
@arg PAPI_DOM_SUPERVISOR Supervisor/hypervisor context counted
@arg PAPI_DOM_ALL All above contexts counted
@arg PAPI_DOM_MIN The smallest available context
@arg PAPI_DOM_MAX The largest available context 

.fi
.PP
  
    
.PP
\fBReturn values:\fP
.RS 4
\fIPAPI_OK\fP 
.br
\fIPAPI_EINVAL\fP One or more of the arguments is invalid\&.  
    
.RE
.PP
\fBPAPI_set_domain\fP sets the default counting domain for all new event sets created by \fBPAPI_create_eventset\fP in all threads\&. This call implicitly sets the domain for the cpu component (component 0) and is included to preserve backward compatibility\&.
.PP
\fBExample:\fP
.RS 4

.PP
.nf
int ret;

// Initialize the library
ret = PAPI_library_init(PAPI_VER_CURRENT);
if (ret > 0 && ret != PAPI_VER_CURRENT) {
  fprintf(stderr,"PAPI library version mismatch!\n");
  exit(1); 
}
if (ret < 0) handle_error(ret);

// Set the default domain for the cpu component
ret = PAPI_set_domain(PAPI_DOM_KERNEL);
if (ret != PAPI_OK) handle_error(ret);
ret = PAPI_create_eventset(&EventSet);
if (ret != PAPI_OK) handle_error(ret);
 *  

.fi
.PP
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBPAPI_set_cmp_domain\fP \fBPAPI_set_granularity\fP \fBPAPI_set_opt\fP \fBPAPI_get_opt\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
