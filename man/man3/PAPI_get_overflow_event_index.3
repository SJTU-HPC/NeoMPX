.TH "PAPI_get_overflow_event_index" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_get_overflow_event_index \- 
.PP
converts an overflow vector into an array of indexes to overflowing events  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@param EventSet
    an integer handle to a PAPI event set as created by PAPI_create_eventset
@param overflow_vector
    a vector with bits set for each counter that overflowed. 
    This vector is passed by the system to the overflow handler routine.
@param *array
    an array of indexes for events in EventSet. 
    No more than *number indexes will be stored into the array.
@param *number 
    On input the variable determines the size of the array. 
    On output the variable contains the number of indexes in the array. 

@retval PAPI_EINVAL 
    One or more of the arguments is invalid. This could occur if the overflow_vector is empty (zero), if the array or number pointers are NULL, if the value of number is less than one, or if the EventSet is empty.
@retval PAPI_ENOEVST
The EventSet specified does not exist.
@par Examples

.fi
.PP
 
.PP
.nf
        void handler(int EventSet, void *address, long_long overflow_vector, void *context){
        int Events[4], number, i;
        int total = 0, retval;
        printf("Overflow #%d\n  Handler(%d) Overflow at %p! vector=%#llx\n",
        total, EventSet, address, overflow_vector);
        total++;
        number = 4;
        retval = PAPI_get_overflow_event_index(EventSet,
        overflow_vector, Events, &number);
        if(retval == PAPI_OK)
        for(i=0; i<number; i++) printf("Event index[%d] = %d", i, Events[i]);}
*   

.fi
.PP
  
.PP
.nf
@see PAPI_overflow
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
