.TH "PAPI_is_initialized" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_is_initialized \- 
.PP
check for initialization  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@retval PAPI_NOT_INITED
    Library has not been initialized
@retval PAPI_LOW_LEVEL_INITED
    Low level has called library init
@retval PAPI_HIGH_LEVEL_INITED
    High level has called library init 
@retval PAPI_THREAD_LEVEL_INITED    
    Threads have been inited 

@param version
 upon initialization, PAPI checks the argument against the internal value of PAPI_VER_CURRENT when the library was compiled. 
This guards against portability problems when updating the PAPI shared libraries on your system.
@par Examples:

.fi
.PP
 
.PP
.nf
        int retval;
        retval = PAPI_library_init(PAPI_VER_CURRENT);
        if (retval != PAPI_VER_CURRENT && retval > 0) {
        fprintf(stderr,"PAPI library version mismatch!\en");
        exit(1); }
        if (retval < 0)
        handle_error(retval);
        retval = PAPI_is_initialized();
        if (retval != PAPI_LOW_LEVEL_INITED)
        handle_error(retval);
*   

.fi
.PP
 \fBPAPI_is_initialized()\fP returns the status of the PAPI library\&. The PAPI library can be in one of four states, as described under RETURN VALUES\&.  
.PP
\fBSee Also:\fP
.RS 4
PAPI 
.PP
\fBPAPI_thread_init\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
