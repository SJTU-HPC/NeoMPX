.TH "PAPI_get_virt_usec" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_get_virt_usec \- 
.PP
get virtual time counter values in microseconds  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@retval PAPI_ECNFLCT 
    If there is no master event set. 
    This will happen if the library has not been initialized, or for threaded 
    applications, if there has been no thread id function defined by the 
    PAPI_thread_init function.
@retval PAPI_ENOMEM
    For threaded applications, if there has not yet been any thread 
    specific master event created for the current thread, and if the 
    allocation of such an event set fails, the call will return PAPI_ENOMEM or PAPI_ESYS . 

This function returns the total number of virtual units from some 
arbitrary starting point. 
Virtual units accrue every time the process is running in user-mode on 
behalf of the process. 
Like the real time counters, this count is guaranteed to exist on every 
platform PAPI supports. However on some platforms, the resolution can be 
as bad as 1/Hz as defined by the operating system.
@par Examples:

.fi
.PP
 
.PP
.nf
        s = PAPI_get_virt_cyc();
        your_slow_code();
        e = PAPI_get_virt_cyc();
        printf("Process has run for cycles: %lld\en",e-s);
*   

.fi
.PP
 
.PP
\fBSee Also:\fP
.RS 4
PAPIF 
.PP
PAPI 
.PP
PAPI 
.PP
\fBPAPI_get_real_cyc\fP 
.PP
\fBPAPI_get_virt_cyc\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
