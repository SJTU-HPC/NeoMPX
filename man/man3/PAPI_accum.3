.TH "PAPI_accum" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_accum \- 
.PP
Accumulate and reset counters in an EventSet\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@par C Interface:
\#include <papi.h> @n
int PAPI_accum( int  EventSet, long_long * values );

These calls assume an initialized PAPI library and a properly added event set. 
PAPI_accum adds the counters of the indicated event set into the array values. 
The counters are zeroed and continue counting after the operation.
Note the differences between PAPI_read and PAPI_accum, specifically 
that PAPI_accum resets the values array to zero. 

@param EventSet
    an integer handle for a PAPI Event Set 
    as created by PAPI_create_eventset
@param *values 
    an array to hold the counter values of the counting events 

@retval PAPI_EINVAL 
    One or more of the arguments is invalid.
@retval PAPI_ESYS 
    A system or C library call failed inside PAPI, see the errno variable.
@retval PAPI_ENOEVST 
    The event set specified does not exist. 

@par Examples:

.fi
.PP
 
.PP
.nf
*   do_100events( );
*   if ( PAPI_read( EventSet, values) != PAPI_OK )
*   handle_error( 1 );
*   // values[0] now equals 100
*   do_100events( );
*   if (PAPI_accum( EventSet, values ) != PAPI_OK )
*   handle_error( 1 );
*   // values[0] now equals 200
*   values[0] = -100;
*   do_100events( );
*   if (PAPI_accum( EventSet, values ) != PAPI_OK )
*   handle_error( 1 );
*   // values[0] now equals 0
*   

.fi
.PP
.PP
\fBSee Also:\fP
.RS 4
\fBPAPIF_accum\fP 
.PP
\fBPAPI_start\fP 
.PP
\fBPAPI_set_opt\fP 
.PP
\fBPAPI_reset\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
