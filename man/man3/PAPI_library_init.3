.TH "PAPI_library_init" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_library_init \- 
.PP
initialize the PAPI library\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@param version 
    upon initialization, PAPI checks the argument against the internal 
    value of PAPI_VER_CURRENT when the library was compiled. 
    This guards against portability problems when updating the PAPI shared 
    libraries on your system. 

@retval PAPI_EINVAL 
    papi.h is different from the version used to compile the PAPI library.
@retval PAPI_ENOMEM 
    Insufficient memory to complete the operation.
@retval PAPI_ECMP 
    This component does not support the underlying hardware.
@retval PAPI_ESYS 
    A system or C library call failed inside PAPI, see the errno variable. 

PAPI_library_init() initializes the PAPI library. 
PAPI_is_initialized() check for initialization.
It must be called before any low level PAPI functions can be used. 
If your application is making use of threads PAPI_thread_init must also be 
called prior to making any calls to the library other than PAPI_library_init() . 
@par Examples:

.fi
.PP
 
.PP
.nf
*       int retval;
*       retval = PAPI_library_init(PAPI_VER_CURRENT);
*       if (retval != PAPI_VER_CURRENT && retval > 0) {
*           fprintf(stderr,"PAPI library version mismatch!\en");
*           exit(1); }
*       if (retval < 0)
*           handle_error(retval);
*       retval = PAPI_is_initialized();
*       if (retval != PAPI_LOW_LEVEL_INITED)
*           handle_error(retval)    
*   

.fi
.PP
  
.PP
\fBSee Also:\fP
.RS 4
\fBPAPI_thread_init\fP PAPI 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
