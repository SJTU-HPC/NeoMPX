.TH "PAPI_accum_counters" 3 "Fri Feb 22 2019" "Version 5.7.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_accum_counters \- 
.PP
Accumulate and reset counters\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
.nf
@par C Interface:
\#include <papi.h> @n
int PAPI_accum_counters( long long *values, int array_len );

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI*values\fP an array to hold the counter values of the counting events 
.br
\fIarry_len\fP the number of items in the *events array
.RE
.PP
\fBPrecondition:\fP
.RS 4
These calls assume an initialized PAPI library and a properly added event set\&.
.RE
.PP
\fBPostcondition:\fP
.RS 4
The counters are reset and left running after the call\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIPAPI_EINVAL\fP One or more of the arguments is invalid\&. 
.br
\fIPAPI_ESYS\fP A system or C library call failed inside PAPI, see the errno variable\&.
.RE
.PP
\fBPAPI_accum_counters()\fP adds the event counters into the array *values\&.
.PP
.PP
.nf
do_100events();
if ( PAPI_read_counters( values, num_hwcntrs ) != PAPI_OK )
    handlw_error(1);
// values[0] now equals 100 
do_100events();
if ( PAPI_accum_counters( values, num_hwcntrs ) != PAPI_OK )
    handle_error(1);
// values[0] now equals 200
values[0] = -100;
do_100events();
if ( PAPI_accum_counters(values, num_hwcntrs ) != PAPI_OK )
    handle_error();
// values[0] now equals 0
 *  
.fi
.PP
.PP
\fBSee Also:\fP
.RS 4
\fBPAPI_set_opt()\fP \fBPAPI_start_counters()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
